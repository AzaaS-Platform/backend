service:
  name: azaas-backend
  description: 'AzaaS Backend Lambda service'

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
    packager: 'npm'
  serverless-offline:
    useChildProcesses: true

plugins:
  - serverless-webpack
  - serverless-offline

package:
  individually: false
  exclude:
    - node_modules/**
    - src/**

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: eu-central-1
  memorySize: 256
  timeout: 15
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribleTable
      Resource: "*"

functions:
  groupGet:
    handler: src/controllers/GroupController.get
    events:
      - http:
          method: get
          path: groups/{entity}
          cors:
            origin: '*'
            headers:
              - Content-Type
              - x-azaas-client
              - Authorization
              - X-Amz-User-Agent
              - X-Amz-Security-Token
              - X-Api-Key
              - X-Amz-Date
          request:
            parameters:
              paths:
                client: true
                entity: true
  groupGetAll:
    handler: src/controllers/GroupController.getAll
    events:
      - http:
          method: get
          path: groups
          cors:
            origin: '*'
            headers:
              - Content-Type
              - x-azaas-client
              - Authorization
              - X-Amz-User-Agent
              - X-Amz-Security-Token
              - X-Api-Key
              - X-Amz-Date
          request:
            parameters:
              paths:
                client: true
  groupAdd:
    handler: src/controllers/GroupController.add
    events:
      - http:
          method: post
          path: groups
          cors:
            origin: '*'
            headers:
              - Content-Type
              - x-azaas-client
              - Authorization
              - X-Amz-User-Agent
              - X-Amz-Security-Token
              - X-Api-Key
              - X-Amz-Date
          request:
            parameters:
              paths:
                client: true
  groupModify:
    handler: src/controllers/GroupController.modify
    events:
      - http:
          method: put
          path: groups/{entity}
          cors:
            origin: '*'
            headers:
              - Content-Type
              - x-azaas-client
              - Authorization
              - X-Amz-User-Agent
              - X-Amz-Security-Token
              - X-Api-Key
              - X-Amz-Date
          request:
            parameters:
              paths:
                client: true
                entity: true
  groupRemove:
    handler: src/controllers/GroupController.remove
    events:
      - http:
          method: delete
          path: groups/{entity}
          cors:
            origin: '*'
            headers:
              - Content-Type
              - x-azaas-client
              - Authorization
              - X-Amz-User-Agent
              - X-Amz-Security-Token
              - X-Api-Key
              - X-Amz-Date
          request:
            parameters:
              paths:
                client: true
                entity: true

  userGet:
    handler: src/controllers/UserController.get
    events:
      - http:
          method: get
          path: users/{entity}
          cors:
            origin: '*'
            headers:
              - Content-Type
              - x-azaas-client
              - Authorization
              - X-Amz-User-Agent
              - X-Amz-Security-Token
              - X-Api-Key
              - X-Amz-Date
          request:
            parameters:
              paths:
                client: true
                entity: true
  userGetAll:
    handler: src/controllers/UserController.getAll
    events:
      - http:
          method: get
          path: users
          cors:
            origin: '*'
            headers:
              - Content-Type
              - x-azaas-client
              - Authorization
              - X-Amz-User-Agent
              - X-Amz-Security-Token
              - X-Api-Key
              - X-Amz-Date
          request:
            parameters:
              paths:
                client: true
  userAdd:
    handler: src/controllers/UserController.add
    events:
      - http:
          method: post
          path: users
          cors:
            origin: '*'
            headers:
              - Content-Type
              - x-azaas-client
              - Authorization
              - X-Amz-User-Agent
              - X-Amz-Security-Token
              - X-Api-Key
              - X-Amz-Date
          request:
            parameters:
              paths:
                client: true
  userModify:
    handler: src/controllers/UserController.modify
    events:
      - http:
          method: put
          path: users/{entity}
          cors:
            origin: '*'
            headers:
              - Content-Type
              - x-azaas-client
              - Authorization
              - X-Amz-User-Agent
              - X-Amz-Security-Token
              - X-Api-Key
              - X-Amz-Date
          request:
            parameters:
              paths:
                client: true
                entity: true
  userRemove:
    handler: src/controllers/UserController.remove
    events:
      - http:
          method: delete
          path: users/{entity}
          cors:
            origin: '*'
            headers:
              - Content-Type
              - x-azaas-client
              - Authorization
              - X-Amz-User-Agent
              - X-Amz-Security-Token
              - X-Api-Key
              - X-Amz-Date
          request:
            parameters:
              paths:
                client: true
                entity: true
  add2FA:
    handler: src/controllers/UserController.add2FA
    events:
      - http:
          method: post
          path: users/{entity}/mfa
          cors:
            origin: '*'
            headers:
              - Content-Type
              - x-azaas-client
              - Authorization
              - X-Amz-User-Agent
              - X-Amz-Security-Token
              - X-Api-Key
              - X-Amz-Date
          request:
            parameters:
              paths:
                client: true
                entity: true
  check2FA:
    handler: src/controllers/UserController.check2FA
    events:
      - http:
          method: get
          path: users/{entity}/mfa
          cors:
            origin: '*'
            headers:
              - Content-Type
              - x-azaas-client
              - Authorization
              - X-Amz-User-Agent
              - X-Amz-Security-Token
              - X-Api-Key
              - X-Amz-Date
          request:
            parameters:
              paths:
                client: true
                entity: true
  remove2FA:
    handler: src/controllers/UserController.remove2FA
    events:
      - http:
          method: delete
          path: users/{entity}/mfa
          cors:
            origin: '*'
            headers:
              - Content-Type
              - x-azaas-client
              - Authorization
              - X-Amz-User-Agent
              - X-Amz-Security-Token
              - X-Api-Key
              - X-Amz-Date
          request:
            parameters:
              paths:
                client: true
                entity: true
  getToken:
    handler: src/controllers/AuthenticationController.authenticate
    events:
      - http:
          method: post
          path: token
          cors:
            origin: '*'
            headers:
              - Content-Type
              - x-azaas-client
              - Authorization
              - X-Amz-User-Agent
              - X-Amz-Security-Token
              - X-Api-Key
              - X-Amz-Date
          request:
            parameters:
              paths:
                client: true
  authorize:
    handler: src/controllers/AuthenticationController.authorize
    events:
      - http:
          method: post
          path: authorize
          cors:
            origin: '*'
            headers:
              - Content-Type
              - x-azaas-client
              - Authorization
              - X-Amz-User-Agent
              - X-Amz-Security-Token
              - X-Api-Key
              - X-Amz-Date
  invalidateToken:
    handler: src/controllers/AuthenticationController.invalidate
    events:
      - http:
          method: get
          path: token/invalidate
          cors:
            origin: '*'
            headers:
              - Content-Type
              - x-azaas-client
              - Authorization
              - X-Amz-User-Agent
              - X-Amz-Security-Token
              - X-Api-Key
              - X-Amz-Date
  refreshToken:
    handler: src/controllers/AuthenticationController.refresh
    events:
      - http:
          method: get
          path: token
          cors:
            origin: '*'
            headers:
              - Content-Type
              - x-azaas-client
              - Authorization
              - X-Amz-User-Agent
              - X-Amz-Security-Token
              - X-Api-Key
              - X-Amz-Date
  registerClient:
    handler: src/controllers/ClientController.register
    events:
      - http:
          method: post
          path: clients
          cors:
            origin: '*'
            headers:
              - Content-Type
              - x-azaas-client
              - Authorization
              - X-Amz-User-Agent
              - X-Amz-Security-Token
              - X-Api-Key
              - X-Amz-Date

  putAllowedUrls:
    handler: src/controllers/ClientController.putAllowedUrls
    events:
      - http:
          method: put
          path: allowedUrls
          cors:
            origin: '*'
            headers:
              - Content-Type
              - x-azaas-client
              - Authorization
              - X-Amz-User-Agent
              - X-Amz-Security-Token
              - X-Api-Key
              - X-Amz-Date

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'